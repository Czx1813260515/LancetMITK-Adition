/*============================================================================

The Medical Imaging Interaction Toolkit (MITK)

Copyright (c) German Cancer Research Center (DKFZ)
All rights reserved.

Use of this source code is governed by a 3-clause BSD license that can be
found in the LICENSE file.

============================================================================*/

#ifndef HIPTERMDEFINITION_H
#define HIPTERMDEFINITION_H

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkOrthopedicsExports.h>

namespace othopedics
{
	
	
	enum class MITKORTHOPEDICS_EXPORT ESide
	{
		right,
		left
	};

	MITKORTHOPEDICS_EXPORT inline const char* to_string(ESide e)
	{
		switch (e)
		{
		case ESide::right: return "right";
		case ESide::left: return "left";
		default: return "unknown";
		}
	}

	enum class ELandMarks
	{
		//==========================Pelvis=======================
		/** \brief [UserInput] A registration point located near the lowermost border of the operative posterior acetabulum.*/
		p_PostHorn = 0,
		/** \brief [UserInput] A registration point located near the lowermost border of the operative anterior acetabulum..*/
		p_AntHorn,
		/** \brief [UserInput] A depressed area located lateral to the anterior margin of the operative acetabulum,
		 * easily palpable or identifiable during surgery.
		 * Used only as an alternative choice for the anterior horn landmark in direct anterior pelvic registration.*/
		p_AntNotch,
		/** \brief [UserInput]Hip Center of Rotation	(operative Side) */
		p_COR,

		/** \brief [UserInput] Left ASIS(Anterior superior iliac spine) */
		p_ASIS_L,
		/** \brief [UserInput] Right ASIS(Anterior superior iliac spine) */
		p_ASIS_R,
		/** \brief [UserInput] Left Pubic tubercle,The rounded eminence located at the upper border of the right pubis near the pubic symphysis. */
		p_PT_L,
		/** \brief [UserInput] Right Pubic tubercle */
		p_PT_R,
		/** \brief [UserInput] Leaving the boneand centrally located in the symphysis pubis, it is used to determine the midlineand plane of segmentation of the pelvis. */
		p_MidLine,
		/** \brief [UserInput]The top line of the sacral plate (S1) defined on the sagittal CT image, used to determine the angle between the sacral plate and the anterior-posterior axis.	 */
		p_SS_A,
		/** \brief [UserInput]The top line of the sacral plate (S1) defined on the sagittal CT image, used to determine the angle between the sacral plate and the anterior-posterior axis.	 */
		p_SS_P,

		/** \brief [UserInput]Femur Assembly Point (Left Side) = FHC_L	*/
		p_FemurAssemblyPoint_L,
		/** \brief [UserInput]Femur Assembly Point (Right Side) = FHC_R */
		p_FemurAssemblyPoint_R,

		/** \brief [ModelOutput] the Origin of Pelvis local coordinates */
		p_O,

		// /** \brief [ModelOutput] the Center of Right Acetabular */
		// p_RAC,
		// /** \brief [ModelOutput] the Center of Left Acetabular */
		// p_LAC,


		//==========================Femur=======================

		/** \brief [UserInput] Femoral Neck Saddle */
		f_FNS,
		/** \brief [UserInput] Femur Landmark 2 */
		f_FL2,
		/** \brief [UserInput] Greater Trochanter */
		f_GT,

		/** \brief [UserInput] Femur Head Center */
		f_FHC,
		/** \brief [UserInput] Femur Neck center */
		f_FNC,
		/** \brief [UserInput] Proximal point of Femoral canal axis */
		f_PFCA,
		/** \brief [UserInput] Distal point of Femoral canal axis  */
		f_DFCA,
		/** \brief [UserInput] Medial Femoral Epicondyle */
		f_ME,
		/** \brief [UserInput] Lateral Femoral Epicondyle  */
		f_LE,
		/** \brief [UserInput] Lesser Trochanter */
		f_LT,
		/** \brief [ModelOutput] Midpoint of Medial and Lateral Epicondyles */
		f_MidEEs,

		f_O,

		/** \brief [UserInput] Proximal Checkpoint,The position before the operation   */
		f_CheckPointP_pre,
		/** \brief [UserInput] Distal Checkpoint,The position before the operation    */
		f_CheckPointD_pre,
		/** \brief [UserInput] Proximal Checkpoint,The position after the operation   */
		f_CheckPointP_post,
		/** \brief [UserInput] Distal Checkpoint,The position after the operation    */
		f_CheckPointD_post,
		/** \brief [UserInput] Femur Head Center During the operation, the surgeon will place four points on the cup to verify its placement.  */
		f_FHC_inOp
	};

	inline const char* to_String(ELandMarks e)
	{
		switch (e)
		{
		case ELandMarks::p_PostHorn: return "p_PostHorn";
		case ELandMarks::p_AntHorn: return "p_AntHorn";
		case ELandMarks::p_AntNotch: return "p_AntNotch";
		case ELandMarks::p_COR: return "p_COR";
		case ELandMarks::p_ASIS_R: return "p_ASIS_R";
		case ELandMarks::p_ASIS_L: return "p_ASIS_L";
		case ELandMarks::p_PT_R: return "p_PT_R";
		case ELandMarks::p_PT_L: return "p_PT_L";
		case ELandMarks::p_MidLine: return "p_MidLine";
		case ELandMarks::p_SS_A: return "p_SS_A";
		case ELandMarks::p_SS_P: return "p_SS_P";
		case ELandMarks::p_FemurAssemblyPoint_L: return "p_FemurAssemblyPoint_L";
		case ELandMarks::p_FemurAssemblyPoint_R: return "p_FemurAssemblyPoint_R";
		case ELandMarks::p_O: return "p_O";
		case ELandMarks::f_FNS: return "f_FNS";
		case ELandMarks::f_FL2: return "f_FL2";
		case ELandMarks::f_GT: return "f_GT";
		case ELandMarks::f_FHC: return "f_FHC";
		case ELandMarks::f_FNC: return "f_FNC";
		case ELandMarks::f_PFCA: return "f_PFCA";
		case ELandMarks::f_DFCA: return "f_DFCA";
		case ELandMarks::f_ME: return "f_ME";
		case ELandMarks::f_LE: return "f_LE";
		case ELandMarks::f_LT: return "f_LT";
		case ELandMarks::f_CheckPointP_pre: return "f_CheckPointP_pre";
		case ELandMarks::f_CheckPointD_pre: return "f_CheckPointD_pre";
		case ELandMarks::f_CheckPointP_post: return "f_CheckPointP_post";
		case ELandMarks::f_CheckPointD_post: return "f_CheckPointD_post";
		case ELandMarks::f_FHC_inOp: return "f_FHC_inOp";
		case ELandMarks::f_MidEEs: return "f_MidEEs";
		case ELandMarks::f_O: return "f_O";
		default: return "unknown";
		}
	}

	enum class EAxes
	{
		/** \brief [ModelOutput] Pelvic local coords X axis,
		 * pointing to anterior,Perpendicular to the plane defined by the bilateral anterior superior iliac spines and midpoint, perpendicular to the Z-axis, . */
		p_X = 0,
		/** \brief [ModelOutput] Pelvic local coords Y axis,
		 * pointing to head,Perpendicular to both the X-axis and Z-axis. */
		p_Y,
		/** \brief [ModelOutput] Pelvic local coords Z axis,
		 * pointing to the right. Parallel to the line connecting the left and right anterior superior iliac spines */
		p_Z,
		/** \brief [ModelOutput] Pelvic Horizontal Axis, The line connecting LASI and RASI */

		/** \brief [ModelOutput] Femur Mechanical Axis*/
		f_Mechanics,
		/** \brief [ModelOutput] Femur Canal Axis*/
		f_Canal,
		/** \brief [ModelOutput] Femur Epicondylar Axis*/
		f_Epicondyla,
		/** \brief [ModelOutput] Femur Neck Axis*/
		f_Neck,

		f_X_canal,
		f_Y_canal,
		f_Z_canal,

		f_X_mechanical,
		f_Y_mechanical,
		f_Z_mechanical,


		//prothesis
		cup_X,
		cup_Y,
		cup_Z
	};

	inline const char* to_string(EAxes e)
	{
		switch (e)
		{
		case EAxes::p_X: return "p_X";
		case EAxes::p_Y: return "p_Y";
		case EAxes::p_Z: return "p_Z";
		case EAxes::f_Mechanics: return "f_Mechanics";
		case EAxes::f_Canal: return "f_Canal";
		case EAxes::f_Epicondyla: return "f_Epicondyla";
		case EAxes::f_Neck: return "f_Neck";
		case EAxes::f_X_canal: return "f_X_canal";
		case EAxes::f_Y_canal: return "f_Y_canal";
		case EAxes::f_Z_canal: return "f_Z_canal";
		case EAxes::f_X_mechanical: return "f_X_mechanical";
		case EAxes::f_Y_mechanical: return "f_Y_mechanical";
		case EAxes::f_Z_mechanical: return "f_Z_mechanical";
		default: return "unknown";
		}
	}

	enum class EPlanes
	{
		MIDPLANE = 0,
	};

	inline const char* to_String(EPlanes e)
	{
		switch (e)
		{
		case EPlanes::MIDPLANE: return "MIDPLANE";
		default: return "unknown";
		}
	}

	enum class EResult
	{
		/** \brief [ModelOutput] 骨盆前倾角*/
		f_PT = 0,
		/** \brief [ModelOutput] 在双侧股骨机械轴对齐，股骨偏心距最大处与冠状面平行的前提下，从小转子到髂前上棘连线（即骨盆横轴）的距离*/
		f_HipLength,
		/** \brief [ModelOutput] 在股骨干垂直，股骨偏心距最大处与冠状面平行，股骨干轴到骨盆中轴面的距离*/
		f_Offset,

		f_HipLength_post,
		f_Offset_post,
		/** \brief [ModelOutput] Difference(mm) in hip length between the operative and contralateral sides before operation*/
		f_HipLengthDiff_preOp2Contral,
		/** \brief [ModelOutput] Difference(mm) in hip length between the operative and contralateral sides after operation*/
		f_HipLengthDiff_Op2Contralateral,
		/** \brief [ModelOutput] Difference(mm) in hip length before and after operation */
		f_HipLengthDiff_PrePostOp,
		/** \brief[ModelOutput] Difference(mm) in Combined Offset between the operative and contralateral sides before operation */
		f_OffsetDiff_preOp2Contral,
		/** \brief[ModelOutput] Difference(mm) in Combined Offset between the operative and contralateral sides after operation*/
		f_OffsetDiff_Op2Contralateral,
		/** \brief[ModelOutput] Difference(mm) in Combined Offset before and after operation */
		f_OffsetDiff_PrePostOp,
		/** \brief [ModelOutput] 术侧股骨倾角*/
		f_OpVersion,

		/** \brief [ModelOutput] 右侧臼杯前倾角*/
		p_RightAnteversion,
		/** \brief [ModelOutput] 右侧臼杯外展角*/
		p_RightInclination,
		/** \brief [ModelOutput] 左侧臼杯前倾角*/
		p_LeftAnteversion,
		/** \brief [ModelOutput] 左侧臼杯外展角*/
		p_LeftInclination
	};

	inline const char* to_string(EResult e)
	{
		switch (e)
		{
		case EResult::f_PT: return "f_PT";
		case EResult::f_HipLength: return "f_HipLength";
		case EResult::f_Offset: return "f_Offset";
		case EResult::f_HipLength_post: return "f_HipLength_post";
		case EResult::f_Offset_post: return "f_Offset_post";
		case EResult::f_HipLengthDiff_preOp2Contral: return "f_HipLengthDiff_preOp2Contral";
		case EResult::f_HipLengthDiff_Op2Contralateral: return "f_HipLengthDiff_Op2Contralateral";
		case EResult::f_HipLengthDiff_PrePostOp: return "f_HipLengthDiff_PrePostOp";
		case EResult::f_OffsetDiff_preOp2Contral: return "f_OffsetDiff_preOp2Contral";
		case EResult::f_OffsetDiff_Op2Contralateral: return "f_OffsetDiff_Op2Contralateral";
		case EResult::f_OffsetDiff_PrePostOp: return "f_OffsetDiff_PrePostOp";
		case EResult::f_OpVersion: return "f_OpVersion";
		case EResult::p_RightAnteversion: return "p_RightAnteversion";
		case EResult::p_RightInclination: return "p_RightInclination";
		case EResult::p_LeftAnteversion: return "p_LeftAnteversion";
		case EResult::p_LeftInclination: return "p_LeftInclination";
		default: return "unknown";
		}
	}

	enum class ECupAngleType
	{
		RADIO_GRAPHIC,//常用，影像学定义
		OPERATIVE, //机械轴的定义
		ANATOMICAL //解剖学的定义
	};
}


#endif
