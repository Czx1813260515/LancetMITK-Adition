#ifndef THAREDUCTIONOBJECT_H
#define THAREDUCTIONOBJECT_H

#include <mitkImageToImageFilter.h>

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkLancetIGTExports.h>

#include "lancetThaFemurObject.h"
#include "lancetThaPelvisObject.h"
#include "mitkDataNode.h"
#include "mitkPointSet.h"
#include "mitkSurface.h"

namespace lancet
{
	/**Documentation
	  * \brief 
	  *
	  * \ingroup IGT
	  */
	class MITKLANCETIGT_EXPORT ThaReductionObject : public itk::DataObject
	{
	public:
		mitkClassMacroItkParent(ThaReductionObject, itk::DataObject);
		itkFactorylessNewMacro(Self)
		itkCloneMacro(Self)

		itkSetMacro(FemurObject_R,lancet::ThaFemurObject::Pointer)
		itkSetMacro(FemurObject_L, lancet::ThaFemurObject::Pointer)
		itkSetMacro(PelvisObject, lancet::ThaPelvisObject::Pointer)

		itkGetMacro(HipLength_supine_R,double)
		itkGetMacro(HipLength_supine_L, double)
		itkGetMacro(CombinedOffset_supine_R, double)
		itkGetMacro(CombinedOffset_supine_L, double)

		// get matrices for No pelvicTilt and femurCanal alignment
		void GetOriginalNoTiltCanalMatrices(vtkSmartPointer<vtkMatrix4x4> pelvisMatrix,
				vtkSmartPointer<vtkMatrix4x4> rightFemurMatrix,
				vtkSmartPointer<vtkMatrix4x4> leftFemurMatrix);

		// get matrices for No pelvicTilt and femur mechanic axis alignment
		void GetOriginalNoTiltMechanicMatrices(vtkSmartPointer<vtkMatrix4x4> pelvisMatrix,
			vtkSmartPointer<vtkMatrix4x4> rightFemurMatrix,
			vtkSmartPointer<vtkMatrix4x4> leftFemurMatrix);

		// get matrices for supine pelvicTilt and femurCanal alignment
		void GetOriginalSupineTiltCanalMatrices(vtkSmartPointer<vtkMatrix4x4> pelvisMatrix,
			vtkSmartPointer<vtkMatrix4x4> rightFemurMatrix,
			vtkSmartPointer<vtkMatrix4x4> leftFemurMatrix);

		// get matrices for supine pelvicTilt and femur mechanic axis alignment
		void GetOriginalSupineTiltMechanicMatrices(vtkSmartPointer<vtkMatrix4x4> pelvisMatrix,
			vtkSmartPointer<vtkMatrix4x4> rightFemurMatrix,
			vtkSmartPointer<vtkMatrix4x4> leftFemurMatrix);
			   
	protected:

		ThaReductionObject();
		ThaReductionObject(const ThaReductionObject& other);
		~ThaReductionObject() override;


		// update all original patient matrices
		void CalOriginalReductionMatrices();

		// Calculate Hip lengths
		void CalOriginalSupineHipLengths();

		// Calculate combined offsets
		void CalOriginalSupineCombinedOffsets();

		// Check femur and pelvis availability
		bool CheckBoneAvailablity();

		// update matrices for No pelvicTilt and femurCanal alignment
		void CalOriginalNoTiltCanalMatrices();

		// update matrices for No pelvicTilt and femur mechanic axis alignment
		void CalOriginalNoTiltMechanicMatrices();

		// update matrices for supine pelvicTilt and femurCanal alignment
		void CalOriginalSupineTiltCanalMatrices();

		// update matrices for supine pelvicTilt and femur mechanic axis alignment
		void CalOriginalSupineTiltMechanicMatrices();

		// Original Hip lengths with supine pelvic tilt 
		double m_HipLength_supine_R{ 0 };
		double m_HipLength_supine_L{ 0 };

		// Original Combined offsets with supine pelvic tilt
		double m_CombinedOffset_supine_R{ 0 };
		double m_CombinedOffset_supine_L{ 0 };

		// pelvisObject
		lancet::ThaPelvisObject::Pointer m_PelvisObject;

		// left and right femurObject
		lancet::ThaFemurObject::Pointer m_FemurObject_R;
		lancet::ThaFemurObject::Pointer m_FemurObject_L;

		// pelvis matrix without pelvicTilt, i.e., an identity matrix
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_pelvisMatrix;

		// right femur matrix with femurCanal alignment without pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_canal_matrix_R;

		// left femur matrix with femurCanal alignment without pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_canal_matrix_L;

		// right femur matrix with femur mechanic axis alignment without pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_mechanic_matrix_R;

		// left femur matrix with femur mechanic axis alignment without pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_NoPelvicTilt_mechanic_matrix_L;

		// pelvis matrix with supine pelvicTilt, i.e., an identity matrix
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_pelvisMatrix;

		// right femur matrix with femurCanal alignment with supine pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_canal_matrix_R;

		// left femur matrix with femurCanal alignment with supine pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_canal_matrix_L;

		// right femur matrix with femur mechanic axis alignment with supine pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_mechanic_matrix_R;

		// left femur matrix with femur mechanic axis alignment with supine pelvicTilt
		vtkSmartPointer<vtkMatrix4x4> m_SupinePelvicTilt_mechanic_matrix_L;

		
	};
}

#endif
