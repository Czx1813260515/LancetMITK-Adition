/*============================================================================

The Medical Imaging Interaction Toolkit (MITK)

Copyright (c) German Cancer Research Center (DKFZ)
All rights reserved.

Use of this source code is governed by a 3-clause BSD license that can be
found in the LICENSE file.

============================================================================*/

#ifndef TrackingObject_h
#define TrackingObject_h

#include <mitkImageToImageFilter.h>

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkLancetIGTExports.h>

#include "mitkDataNode.h"
#include "mitkPointSet.h"
#include "mitkSurface.h"

namespace lancet
{
	/**Documentation
	  * \brief An object of this class represents a navigation object in the view of the software.
	  *        Information like an identifier, a object, a surface and a mitk image
	  *        are stored in such an object. The classes NavigationObjectReader and NavigationObjectWriter
	  *        are available to write/read object to/from the hard-disc. If you need a collection
	  *        of navigation object the class NavigationObjectStorage could be used.
	  *
	  * \ingroup IGT
	  */
	class MITKLANCETIGT_EXPORT NavigationObject : public itk::DataObject
	{
	public:
		mitkClassMacroItkParent(NavigationObject, itk::DataObject);
		itkFactorylessNewMacro(Self);
		itkCloneMacro(Self);

		//itkGetMacro(Name, std::string);
		itkGetMacro(ReferencFrameName, std::string);
    itkGetMacro(DataNode, mitk::DataNode::Pointer);
		//itkGetMacro(Surface, mitk::Surface::Pointer);
		itkGetMacro(Landmarks, mitk::PointSet::Pointer);
    itkGetMacro(Landmarks_probe, mitk::PointSet::Pointer);
    itkGetMacro(IcpPoints, mitk::PointSet::Pointer);
    itkGetMacro(IcpPoints_probe, mitk::PointSet::Pointer);
		itkGetMacro(T_Object2ReferenceFrame, vtkSmartPointer<vtkMatrix4x4>);
		itkGetMacro(Image, mitk::Image::Pointer);

		itkGetMacro(landmarkRegis_avgError, double);
		itkGetMacro(landmarkRegis_maxError, double);
		itkGetMacro(IcpRegis_avgError, double);
		itkGetMacro(IcpRegis_maxError, double);

		//itkSetMacro(Name, std::string);
		itkSetMacro(ReferencFrameName, std::string);
    itkSetMacro(DataNode, mitk::DataNode::Pointer);
		//itkSetMacro(Surface, mitk::Surface::Pointer);
		itkSetMacro(Landmarks, mitk::PointSet::Pointer);
    itkSetMacro(Landmarks_probe, mitk::PointSet::Pointer);
    itkSetMacro(IcpPoints, mitk::PointSet::Pointer);
    itkSetMacro(IcpPoints_probe, mitk::PointSet::Pointer);
		itkSetMacro(T_Object2ReferenceFrame, vtkSmartPointer<vtkMatrix4x4>);
		itkSetMacro(Image, mitk::Image::Pointer);

		// Calculate the transform matrix from the surface coordinate system (where landmark_surface lies) to the RF coordinate system;
		// The surface and the landmark_surface should have an identity geometry matrix when the navigationObject is initialized, otherwise things will become too complicated
		bool UpdateObjectToRfMatrix();

    //ToolName (only getter):
    /** @return Returns the name of this navigation tool. Returns an empty string if there is
     *          no name (for example because the data node has not been set yet).
     *
     *          Note: There is no setter for the name,
     *          because the name of the corresponding data node is used as tool name. So if you
     *          want to modify the name of this navigation tool only get the data node and modify
     *          its name.
     */
    std::string GetName();
    //ToolSurface (only getter):
    /** @return Returns the surface of this navigation tool. Returns nullptr if there is
     *          no surface (for example because the data node has not been set yet).
     *
     *          Note: There is no setter for the surface,
     *          because the surface is the data of the corresponding data node. So if you
     *          want to set a new surface only get the data node and modify its data.
     */
    mitk::Surface::Pointer GetObjectSurface();


    void SetDefaultDataNode();
		/**
		  * \brief Graft the data and information from one NavigationTool to another.
		  *
		  * Copies the content of data into this object.
		  * This is a convenience method to setup a second NavigationTool object with all the meta
		  * information of another NavigationTool object.
		  * Note that this method is different than just using two
		  * SmartPointers to the same NavigationTool object since separate DataObjects are
		  * still maintained.
		  */

		//############################################################

	protected:

    NavigationObject();
    NavigationObject(const NavigationObject& other);
    ~NavigationObject() override;
    itk::LightObject::Pointer InternalClone() const override;
		//## data structure of a navigation tool object ##
		//std::string m_Name;

		/** @brief Holds Name of Reference Frame. */
		std::string m_ReferencFrameName;

    /** @brief This DataNode holds a object name and a object surface */
    mitk::DataNode::Pointer m_DataNode;

		// /** @brief Holds Surface for object visualization. */
		// mitk::Surface::Pointer m_Surface;

		/** @brief Holds Surface for object registration. If there is no special setting, the same as ObjectSurfaceForShow.
		 *
		 * Keeping only the valid part of the surface helps prevent ICP registration to the wrong side surface.
		 */
		//mitk::Surface::Pointer m_SurfaceForRegistration;

		/** @brief Holds landmarks for object landmark registration. */
		mitk::PointSet::Pointer m_Landmarks;

    /** @brief Holds the landmarks registration point obtained from the probe during the actual registration process. */
    mitk::PointSet::Pointer m_Landmarks_probe;

		/** @brief Holds ICP point set for object icp registration, only for visual suggestion, do not strictly corresponds to m_IcpPoints_probe */
		mitk::PointSet::Pointer m_IcpPoints;

    /** @brief Holds the ICP registration point obtained from the probe during the actual registration process. */
    mitk::PointSet::Pointer m_IcpPoints_probe;

		/** @brief Holds Volume Image of object. */
		mitk::Image::Pointer m_Image;

		/** @brief Holds Transform Matrix for object registration.T_Object2ReferenceFrame */
		vtkSmartPointer<vtkMatrix4x4> m_T_Object2ReferenceFrame;
		double m_landmarkRegis_avgError{ 0 };
		double m_landmarkRegis_maxError{ 0 };
		double m_IcpRegis_avgError{ 1000 };
		double m_IcpRegis_maxError{ 1000 };

	};
}

#endif
